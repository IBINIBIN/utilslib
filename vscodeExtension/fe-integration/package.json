{
  "name": "fe-integration",
  "displayName": "FE Integration",
  "description": "",
  "version": "0.0.3",
  "publisher": "Jiabin",
  "engines": {
    "vscode": "^1.84.0"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/T-Tuan/fe-integration"
  },
  "categories": [
    "Snippets",
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "npm run build && tsc -p ./",
    "build": "node build/updateDynamicCode.js",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "deploy": "vsce publish --no-dependencies",
    "lint": "eslint src --ext ts"
  },
  "devDependencies": {
    "@rollup/plugin-virtual": "^3.0.2",
    "@types/node": "18.x",
    "@types/vscode": "^1.84.0",
    "@typescript-eslint/eslint-plugin": "^6.9.0",
    "@typescript-eslint/parser": "^6.9.0",
    "@vscode/test-electron": "^2.3.6",
    "@vscode/vsce": "^2.22.0",
    "acorn": "^8.11.3",
    "acorn-walk": "^8.3.1",
    "axios": "^1.6.5",
    "eslint": "^8.52.0",
    "esm": "^3.2.25",
    "fs-extra": "^11.2.0",
    "glob": "^10.3.10",
    "lodash-es": "^4.17.21",
    "node-fetch": "^3.3.2",
    "postcss": "^8.4.33",
    "rollup": "3.x",
    "ts-morph": "^21.0.1",
    "typescript": "^5.2.2"
  },
  "contributes": {
    "snippets": [
      {
        "path": "./snippets/global.code-snippets"
      },
      {
        "path": "./snippets/global-comment.code-snippets"
      },
      {
        "path": "./snippets/javascript.code-snippets"
      },
      {
        "path": "./snippets/vue.code-snippets"
      }
    ],
    "commands": [
      {
        "command": "fe-integration.js.options",
        "title": "js (g) Panel - 代码片段生成选择器"
      },
      {
        "command": "fe-integration.css.options",
        "title": "css (g) Panel - 代码片段生成选择器"
      },
      {
        "command": "fe-integration.css.fs-8",
        "title": "css (g) fs-8 - 生成代码片段"
      },
      {
        "command": "fe-integration.css.fs-10",
        "title": "css (g) fs-10 - 生成代码片段"
      },
      {
        "command": "fe-integration.css.overflow-ellipsis",
        "title": "css (g) overflow-ellipsis - 单行文本溢出隐藏"
      },
      {
        "command": "fe-integration.css.multi-line-overflow-ellipsis",
        "title": "css (g) multi-line-overflow-ellipsis - 多行文本溢出隐藏"
      },
      {
        "command": "fe-integration.js.camelToSnake",
        "title": "js (g) camelToSnake - 将小驼峰命名转换为蛇形变量名称。"
      },
      {
        "command": "fe-integration.js.capitalize",
        "title": "js (g) capitalize - 将单词的首字母转为大写并返回，如果无法转为大写则返回原单词。"
      },
      {
        "command": "fe-integration.js.catchError",
        "title": "js (g) catchError - 通用错误捕获函数，用于执行可能会抛出异常的函数，并捕获异常信息。"
      },
      {
        "command": "fe-integration.js.clampNumberWithinRange",
        "title": "js (g) clampNumberWithinRange - 确保给定数字在指定范围内。"
      },
      {
        "command": "fe-integration.js.findNodeByDFS",
        "title": "js (g) findNodeByDFS - 使用深度优先搜索算法递归查找指定属性值的节点，并返回匹配节点的数据、父级数据列表和层级关系。"
      },
      {
        "command": "fe-integration.js.formatNumber",
        "title": "js (g) formatNumber - 格式化数字，如果超过指定值则显示为指定值+。"
      },
      {
        "command": "fe-integration.js.formatPrice",
        "title": "js (g) formatPrice - 获取文件名的后缀。,格式化价格，添加千位分隔符并保留指定的小数位数。"
      },
      {
        "command": "fe-integration.js.generateRandomString",
        "title": "js (g) generateRandomString - 生成指定长度的随机字符串。"
      },
      {
        "command": "fe-integration.js.getArrayIntersection",
        "title": "js (g) getArrayIntersection - 获取两个数组的交集，通过指定字段属性进行判断。"
      },
      {
        "command": "fe-integration.js.getBasename",
        "title": "js (g) getBasename - 从文件路径中提取文件名。"
      },
      {
        "command": "fe-integration.js.getFileName",
        "title": "js (g) getFileName - 获取文件名（不包含扩展名）。"
      },
      {
        "command": "fe-integration.js.isArray",
        "title": "js (g) isArray - 检查一个值是否为 Array 类型。"
      },
      {
        "command": "fe-integration.js.isBigInt",
        "title": "js (g) isBigInt - 生成代码片段"
      },
      {
        "command": "fe-integration.js.isBlob",
        "title": "js (g) isBlob - 检查一个值是否为 Blob 类型。"
      },
      {
        "command": "fe-integration.js.isBoolean",
        "title": "js (g) isBoolean - 检查一个值是否为 boolean 类型。"
      },
      {
        "command": "fe-integration.js.isDate",
        "title": "js (g) isDate - 检查一个值是否为 Date 类型。"
      },
      {
        "command": "fe-integration.js.isDef",
        "title": "js (g) isDef - 检查一个值是否为非undefined。\n注: 非「undefined」类型"
      },
      {
        "command": "fe-integration.js.isEmpty",
        "title": "js (g) isEmpty - 检查一个值是否为空。"
      },
      {
        "command": "fe-integration.js.isEmptyArray",
        "title": "js (g) isEmptyArray - 检查一个值是否为空数组。"
      },
      {
        "command": "fe-integration.js.isEmptyObject",
        "title": "js (g) isEmptyObject - 检查一个值是否为空对象。"
      },
      {
        "command": "fe-integration.js.isEmptyString",
        "title": "js (g) isEmptyString - 检查一个值是否为空字符串。"
      },
      {
        "command": "fe-integration.js.isError",
        "title": "js (g) isError - 检查一个值是否为 Error 类型。"
      },
      {
        "command": "fe-integration.js.isFunction",
        "title": "js (g) isFunction - 检查一个值是否为 Function 类型。"
      },
      {
        "command": "fe-integration.js.isHasArray",
        "title": "js (g) isHasArray - 检查一个值是否为非空数组。"
      },
      {
        "command": "fe-integration.js.isHasObject",
        "title": "js (g) isHasObject - 检查一个值是否为非空对象。"
      },
      {
        "command": "fe-integration.js.isHasString",
        "title": "js (g) isHasString - 检查一个值是否为非空字符串。"
      },
      {
        "command": "fe-integration.js.isMap",
        "title": "js (g) isMap - 检查一个值是否为 Map 类型。"
      },
      {
        "command": "fe-integration.js.isNonNullable",
        "title": "js (g) isNonNullable - 检查一个值是否为 `undefined` 或 `null`。"
      },
      {
        "command": "fe-integration.js.isNull",
        "title": "js (g) isNull - 检查一个值是否为 Null 类型。"
      },
      {
        "command": "fe-integration.js.isNullOrUndefined",
        "title": "js (g) isNullOrUndefined - 检查一个值是否为 `undefined` 或 `null`。"
      },
      {
        "command": "fe-integration.js.isNumber",
        "title": "js (g) isNumber - 检查一个值是否为 Number 类型。"
      },
      {
        "command": "fe-integration.js.isObject",
        "title": "js (g) isObject - 检查一个值是否为 Object 类型。"
      },
      {
        "command": "fe-integration.js.isPromise",
        "title": "js (g) isPromise - 检查一个值是否为 Promise 类型。"
      },
      {
        "command": "fe-integration.js.isRegExp",
        "title": "js (g) isRegExp - 检查一个值是否为 RegExp 类型。"
      },
      {
        "command": "fe-integration.js.isSet",
        "title": "js (g) isSet - 检查一个值是否为 Set 类型。"
      },
      {
        "command": "fe-integration.js.isString",
        "title": "js (g) isString - 检查一个值是否为 String 类型。"
      },
      {
        "command": "fe-integration.js.isSymbol",
        "title": "js (g) isSymbol - 检查一个值是否为 Symbol 类型。"
      },
      {
        "command": "fe-integration.js.isTargetInOptions",
        "title": "js (g) isTargetInOptions - 检查指定目标是否在选项中（选项可以是单个对象或对象数组）。"
      },
      {
        "command": "fe-integration.js.isUndefined",
        "title": "js (g) isUndefined - 检查一个值是否为 Undefined 类型。"
      },
      {
        "command": "fe-integration.js.isValueInRange",
        "title": "js (g) isValueInRange - 检测给定的值(数字)是否在指定范围内。"
      },
      {
        "command": "fe-integration.js.isWindow",
        "title": "js (g) isWindow - 检查一个值是否为 Window 类型。"
      },
      {
        "command": "fe-integration.js.numberToChinese",
        "title": "js (g) numberToChinese - 将数字转换为中文数字。"
      },
      {
        "command": "fe-integration.js.omit",
        "title": "js (g) omit - 从对象中排除指定的属性，返回一个新的对象。"
      },
      {
        "command": "fe-integration.js.once",
        "title": "js (g) once - 确保传入的方法只能被执行一次"
      },
      {
        "command": "fe-integration.js.pick",
        "title": "js (g) pick - 从对象中选取指定的属性并返回新的对象。"
      },
      {
        "command": "fe-integration.js.snakeToCamel",
        "title": "js (g) snakeToCamel - 将蛇形变量名称转换为小驼峰命名。"
      },
      {
        "command": "fe-integration.js.downloadFile",
        "title": "js (g) downloadFile - 下载一个 Blob 对象作为指定文件名的文件。"
      },
      {
        "command": "fe-integration.js.getImageSize",
        "title": "js (g) getImageSize - 获取给定图片链接的宽度和高度。"
      },
      {
        "command": "fe-integration.js.getLinesCountAfterInsertion",
        "title": "js (g) getLinesCountAfterInsertion - 获取给定内容插入到指定 DOM 节点后，该节点在父容器中占据的行数。"
      },
      {
        "command": "fe-integration.js.listenClickOutside",
        "title": "js (g) listenClickOutside - 监听鼠标点击事件，如果点击事件不包含指定的元素，则触发回调函数，并返回一个销毁监听事件的方法。"
      },
      {
        "command": "fe-integration.js.loadJS",
        "title": "js (g) loadJS - 动态加载一组 JavaScript 文件。"
      }
    ]
  }
}
