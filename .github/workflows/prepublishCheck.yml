name: 发布前检查包版本是否更新

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  npm_org: \@utilslib

jobs:
  checkPackageVersion:
    outputs:
      corePublish: ${{ steps.compare-version.outputs.corePublish }}
      domPublish: ${{ steps.compare-version.outputs.domPublish }}
      vue2Publish: ${{ steps.compare-version.outputs.vue2Publish }}
      vue3Publish: ${{ steps.compare-version.outputs.vue3Publish }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js >=v16
        uses: actions/setup-node@v3
        with:
          node-version: ">=16"

      - name: Install jq
        run: sudo apt update && sudo apt install -y jq

      - name: Get current package.json version
        id: get-current-version
        run: |
          core_current_version=$(cat packages/core/package.json | jq -r .version)
          echo "core_current_version=$core_current_version" >> $GITHUB_OUTPUT
          echo "core_current_version=$core_current_version"

          dom_current_version=$(cat packages/dom/package.json | jq -r .version)
          echo "dom_current_version=$dom_current_version" >> $GITHUB_OUTPUT
          echo "dom_current_version=$dom_current_version"

          vue2_current_version=$(cat packages/vue2/package.json | jq -r .version)
          echo "vue2_current_version=$vue2_current_version" >> $GITHUB_OUTPUT
          echo "vue2_current_version=$vue2_current_version"

          vue3_current_version=$(cat packages/vue3/package.json | jq -r .version)
          echo "vue3_current_version=$vue3_current_version" >> $GITHUB_OUTPUT
          echo "vue3_current_version=$vue3_current_version"

      - name: Get npm latest version
        id: get-npm-version
        run: |
          if core_latest_version=$(npm view ${{ env.npm_org }}/core version 2>/dev/null); then
            echo "get core Package version: $core_latest_version"
          else
            echo "Failed to get core package version, setting to -1"
            core_latest_version="-1"
          fi

          echo "core_latest_version=$core_latest_version" >> $GITHUB_OUTPUT
          echo "core_latest_version=$core_latest_version"

          if dom_latest_version=$(npm view ${{ env.npm_org }}/dom version 2>/dev/null); then
            echo "get core Package version: $dom_latest_version"
          else
            echo "Failed to get dom package version, setting to -1"
            dom_latest_version="-1"
          fi
          echo "dom_latest_version=$dom_latest_version" >> $GITHUB_OUTPUT
          echo "dom_latest_version=$dom_latest_version"

          if vue2_latest_version=$(npm view ${{ env.npm_org }}/vue2 version 2>/dev/null); then
            echo "get core Package version: $vue2_latest_version"
          else
            echo "Failed to get vue2 package version, setting to -1"
            vue2_latest_version="-1"
          fi
          echo "vue2_latest_version=$vue2_latest_version" >> $GITHUB_OUTPUT
          echo "vue2_latest_version=$vue2_latest_version"

          if vue3_latest_version=$(npm view ${{ env.npm_org }}/vue3 version 2>/dev/null); then
            echo "get core Package version: $vue3_latest_version"
          else
            echo "Failed to get vue3 package version, setting to -1"
            vue3_latest_version="-1"
          fi
          echo "vue3_latest_version=$vue3_latest_version" >> $GITHUB_OUTPUT
          echo "vue3_latest_version=$vue3_latest_version"

      - name: Compare versions
        id: compare-version
        run: |
          core_current_version=${{ steps.get-current-version.outputs.core_current_version }}
          core_latest_version=${{ steps.get-npm-version.outputs.core_latest_version }}

          dom_current_version=${{ steps.get-current-version.outputs.dom_current_version }}
          dom_latest_version=${{ steps.get-npm-version.outputs.dom_latest_version }}

          vue2_current_version=${{ steps.get-current-version.outputs.vue2_current_version }}
          vue2_latest_version=${{ steps.get-npm-version.outputs.vue2_latest_version }}

          vue3_current_version=${{ steps.get-current-version.outputs.vue3_current_version }}
          vue3_latest_version=${{ steps.get-npm-version.outputs.vue3_latest_version }}

          if [ "$core_current_version" != "$core_latest_version" ]; then
            echo "${{ env.npm_org }}/core Version has changed. Triggering the build."
            echo "corePublish=1" >> $GITHUB_OUTPUT
          else
            echo "core version has not changed. Skipping the build."
          fi

          if [ "$dom_current_version" != "$dom_latest_version" ]; then
            echo "${{ env.npm_org }}/dom Version has changed. Triggering the build."
            echo "domPublish=1" >> $GITHUB_OUTPUT
          else
            echo "dom version has not changed. Skipping the build."
          fi

          if [ "$vue2_current_version" != "$vue2_latest_version" ]; then
            echo "${{ env.npm_org }}/dom Version has changed. Triggering the build."
            echo "vue2Publish=1" >> $GITHUB_OUTPUT
          else
            echo "vue2 version has not changed. Skipping the build."
          fi

          if [ "$vue3_current_version" != "$vue3_latest_version" ]; then
            echo "${{ env.npm_org }}/dom Version has changed. Triggering the build."
            echo "vue3Publish=1" >> $GITHUB_OUTPUT
          else
            echo "vue3 version has not changed. Skipping the build."
          fi

      - name: Build and test
        if: steps.compare-version.outputs.trigger_build == 'true'
        run: |
          # 在这里执行构建和测试操作
          echo "Building"

  trigger-another-workflow:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: checkPackageVersion
    if: needs.checkPackageVersion.outputs.corePublish == 1 || needs.checkPackageVersion.outputs.domPublish == 1 || needs.checkPackageVersion.outputs.vue2Publish == 1 || needs.checkPackageVersion.outputs.vue3Publish == 1
    steps:
      - name: Trigger publish-npm workflow
        run: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/publish-npm.yml/dispatches \
          -d '{"ref":"main"}'
